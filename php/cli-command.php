<?php

namespace SettingsRevisions;

class CliCommand extends \WP_CLI_Command {
	static public $plugin_instance;
	public $plugin = null;

	function __construct() {
		$this->plugin = self::$plugin_instance;
	}

	/**
	 * @subcommand regenerate-markdown-readme
	 */
	function regenerate_markdown_readme( $args, $assoc_args ) {
		$self = $this;
		//require_once( PLUGIN_DIR . '/lib/WordPress-Plugin-Readme-Parser/parse-readme.php' );
		$markdown_file = PLUGIN_DIR . '/readme.md';
		//$readme_parser = new \Automattic_Readme();

		if ( ! is_writable( $markdown_file ) ) {
			\WP_CLI::error( 'readme.md is not writable' );
		}

		$readme_txt = file_get_contents( PLUGIN_DIR . '/readme.txt' );

		// Parse metadata
		preg_match( '/^=== (.+?) ===\n(.+?)\n\n(.+?)\n(.+)/s', $readme_txt, $matches ) || \WP_CLI::error( 'Malformed metadata block' );
		$title = $matches[1];
		$short_description = $matches[3];
		$readme_txt_rest = $matches[4];
		$metadata = array_fill_keys( array( 'Contributors', 'Tags', 'Requires at least', 'Tested up to', 'Stable tag', 'License', 'License URI' ), null );
		foreach( explode( "\n", $matches[2] ) as $metadatum ) {
			preg_match( '/^(.+?):\s+(.+)$/', $metadatum, $metadataum_matches ) || \WP_CLI::error( "Parse error in $metadatum" );
			list( $name, $value ) = array_slice( $metadataum_matches, 1, 2 );
			$metadata[$name] = $value;
		}
		$metadata['Contributors'] = preg_split( '/\s*,\s*/', $metadata['Contributors'] );
		$metadata['Tags'] = preg_split( '/\s*,\s*/', $metadata['Tags'] );

		// Format metadata
		$formatted_metadata = $metadata;
		$formatted_metadata['Contributors'] = join(', ', array_map(
			function ( $contributor ) use ( $self ) {
				// @todo Map to GitHub account
				return sprintf( '[%1$s](http://profiles.wordpress.org/%1$s)', $contributor );
			},
			$metadata['Contributors']
		));
		$formatted_metadata['Tags'] = join(', ', array_map(
			function ( $tag ) use ( $self ) {
				return sprintf( '[%1$s](http://wordpress.org/plugins/tags/%1$s)', $tag );
			},
			$metadata['Tags']
		));
		$formatted_metadata['License'] = sprintf( '[%s](%s)', $formatted_metadata['License'], $formatted_metadata['License URI'] );
		unset( $formatted_metadata['License URI'] );
		if ( $metadata['Stable tag'] === 'trunk' ) {
			$formatted_metadata['Stable tag'] .= ' (master)';
		}

		// Render metadata
		$readme_md = "<!-- DO NOT EDIT THIS FILE; it is auto-generated from readme.txt via WP-CLI: wp settings-revisions regenerate-markdown-readme -->\n";
		$readme_md .= sprintf( "# %s\n", $title );
		$readme_md .= "\n";
		$readme_md .= sprintf( "%s\n", $short_description );
		$readme_md .= "\n";
		foreach ( $formatted_metadata as $name => $value ) {
			$readme_md .= sprintf( "**%s:** %s  \n", $name, $value );
		}
		$readme_md .= "\n";

		// Parse sections
		$section_formatters = array(
			'Description' => function ( $body ) {
				return $body . "\n\n[![Build Status](https://travis-ci.org/x-team/wp-settings-revisions.png)](https://travis-ci.org/x-team/wp-settings-revisions)";
			},
			'Screenshots' => function ( $body ) {
				$body = trim( $body );
				$new_body = '';
				$screenshots = array();
				preg_match_all( '/^\d+\. (.+?)$/m', $body, $screenshot_matches, PREG_SET_ORDER ) || \WP_CLI::error( 'Malformed screenshot section' );
				foreach ( $screenshot_matches as $i => $screenshot_match ) {
					$screenshot_name = $screenshot_match[1];
					$new_body .= sprintf( "### %s\n", $screenshot_name );
					$new_body .= "\n";
					$new_body .= sprintf( "![%s](screenshot-%d.png)\n", $screenshot_name, $i + 1 );
					$new_body .= "\n";
				}
				return $new_body;
			},
		);

		preg_match_all( '/(?:^|\n)== (.+?) ==\n(.+?)(?=\n== |$)/s', $readme_txt_rest, $section_matches, PREG_SET_ORDER ) || \WP_CLI::error( 'Failed to parse sections from readme.txt' );
		foreach ( $section_matches as $section_match ) {
			array_shift( $section_match );
			$heading = array_shift( $section_match );
			$body = trim( array_shift( $section_match ) );

			$readme_md .= sprintf( "## %s ##\n", $heading );
			$readme_md .= "\n";

			// Parse subsections
			if ( preg_match_all( '/(?:^|\n)= (.+?) =\n(.+?)(?=\n= |$)/s', $body, $subsection_matches, PREG_SET_ORDER ) ) {
				$body = '';
				foreach ( $subsection_matches as $subsection_match ) {
					array_shift( $subsection_match );
					$subheading = array_shift( $subsection_match );
					$subbody = trim( array_shift( $subsection_match ) );
					$body .= sprintf( "### %s ###\n", $subheading );
					$body .= "\n";
					$body .= sprintf( "%s\n", $subbody );
				}
			}

			if ( isset( $section_formatters[$heading] ) ) {
				$body = trim(call_user_func( $section_formatters[$heading], $body ));
			}

			$readme_md .= sprintf( "%s\n", $body );
			$readme_md .= "\n";
		}

		file_put_contents( $markdown_file, $readme_md );
		\WP_CLI::success( 'readme.md updated' );

	}

}
